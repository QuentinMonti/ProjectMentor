{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/Hetic/ProjectMentor/src/Contexts/ProfileContext.js\";\nimport React, { useState, createContext } from \"react\";\nexport const ProfileContext = createContext();\n\nconst ProfileContextProvider = props => {\n  let [note, setNote] = useState(\"\");\n  let [firstName, setFirstName] = useState(\"\");\n  let [lastName, setLastName] = useState(\"\");\n  let [jobTitle, setJobTitle] = useState(\"\");\n  let [city, setCity] = useState(\"\");\n  let [competences, setCompetences] = useState([]);\n  let [parcours, setParcours] = useState(\"\");\n  let [email, setEmail] = useState(\"\");\n  let [comment, setComment] = useState([]);\n  let [commentAuthor, setCommentAuthor] = useState({});\n  fetch(\"http://localhost:8000/apip/posts/451\").then(response => response.json()).then(data => {\n    setNote(note = data.note);\n    setFirstName(firstName = data.firstName);\n    setLastName(lastName = data.lastName);\n    setJobTitle(jobTitle = data.jobTitle);\n    setCity(city = data.city);\n    setCompetences(competences = data.competences);\n    setParcours(parcours = data.course);\n    setEmail(email = data.email);\n    setComment(comment = data.comments);\n    setCommentAuthor(commentAuthor = comment.firstName);\n    /*     comment.map(({ firstName }) => {\n      setCommentAuthor((commentAuthor = firstName));\n    }); */\n  });\n  console.log(commentAuthor);\n  return /*#__PURE__*/React.createElement(ProfileContext.Provider, {\n    value: {\n      note,\n      firstName,\n      lastName,\n      jobTitle,\n      city,\n      competences,\n      parcours,\n      email,\n      commentAuthor\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default ProfileContextProvider;","map":{"version":3,"sources":["/Users/admin/Documents/Hetic/ProjectMentor/src/Contexts/ProfileContext.js"],"names":["React","useState","createContext","ProfileContext","ProfileContextProvider","props","note","setNote","firstName","setFirstName","lastName","setLastName","jobTitle","setJobTitle","city","setCity","competences","setCompetences","parcours","setParcours","email","setEmail","comment","setComment","commentAuthor","setCommentAuthor","fetch","then","response","json","data","course","comments","console","log","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,aAA1B,QAA+C,OAA/C;AAEA,OAAO,MAAMC,cAAc,GAAGD,aAAa,EAApC;;AAEP,MAAME,sBAAsB,GAAIC,KAAD,IAAW;AACxC,MAAI,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAA9B;AACA,MAAI,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,EAAD,CAAxC;AACA,MAAI,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,EAAD,CAAtC;AACA,MAAI,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAtC;AACA,MAAI,CAACa,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,EAAD,CAA9B;AACA,MAAI,CAACe,WAAD,EAAcC,cAAd,IAAgChB,QAAQ,CAAC,EAAD,CAA5C;AACA,MAAI,CAACiB,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC,EAAD,CAAtC;AACA,MAAI,CAACmB,KAAD,EAAQC,QAAR,IAAoBpB,QAAQ,CAAC,EAAD,CAAhC;AACA,MAAI,CAACqB,OAAD,EAAUC,UAAV,IAAwBtB,QAAQ,CAAC,EAAD,CAApC;AACA,MAAI,CAACuB,aAAD,EAAgBC,gBAAhB,IAAoCxB,QAAQ,CAAC,EAAD,CAAhD;AAEAyB,EAAAA,KAAK,CAAC,sCAAD,CAAL,CACGC,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAESG,IAAD,IAAU;AACdvB,IAAAA,OAAO,CAAED,IAAI,GAAGwB,IAAI,CAACxB,IAAd,CAAP;AACAG,IAAAA,YAAY,CAAED,SAAS,GAAGsB,IAAI,CAACtB,SAAnB,CAAZ;AACAG,IAAAA,WAAW,CAAED,QAAQ,GAAGoB,IAAI,CAACpB,QAAlB,CAAX;AACAG,IAAAA,WAAW,CAAED,QAAQ,GAAGkB,IAAI,CAAClB,QAAlB,CAAX;AACAG,IAAAA,OAAO,CAAED,IAAI,GAAGgB,IAAI,CAAChB,IAAd,CAAP;AACAG,IAAAA,cAAc,CAAED,WAAW,GAAGc,IAAI,CAACd,WAArB,CAAd;AACAG,IAAAA,WAAW,CAAED,QAAQ,GAAGY,IAAI,CAACC,MAAlB,CAAX;AACAV,IAAAA,QAAQ,CAAED,KAAK,GAAGU,IAAI,CAACV,KAAf,CAAR;AACAG,IAAAA,UAAU,CAAED,OAAO,GAAGQ,IAAI,CAACE,QAAjB,CAAV;AACAP,IAAAA,gBAAgB,CAAED,aAAa,GAAGF,OAAO,CAACd,SAA1B,CAAhB;AACA;;;AAGD,GAhBH;AAiBAyB,EAAAA,OAAO,CAACC,GAAR,CAAYV,aAAZ;AACA,sBACE,oBAAC,cAAD,CAAgB,QAAhB;AACE,IAAA,KAAK,EAAE;AACLlB,MAAAA,IADK;AAELE,MAAAA,SAFK;AAGLE,MAAAA,QAHK;AAILE,MAAAA,QAJK;AAKLE,MAAAA,IALK;AAMLE,MAAAA,WANK;AAOLE,MAAAA,QAPK;AAQLE,MAAAA,KARK;AASLI,MAAAA;AATK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAaGnB,KAAK,CAAC8B,QAbT,CADF;AAiBD,CA/CD;;AAgDA,eAAe/B,sBAAf","sourcesContent":["import React, { useState, createContext } from \"react\";\n\nexport const ProfileContext = createContext();\n\nconst ProfileContextProvider = (props) => {\n  let [note, setNote] = useState(\"\");\n  let [firstName, setFirstName] = useState(\"\");\n  let [lastName, setLastName] = useState(\"\");\n  let [jobTitle, setJobTitle] = useState(\"\");\n  let [city, setCity] = useState(\"\");\n  let [competences, setCompetences] = useState([]);\n  let [parcours, setParcours] = useState(\"\");\n  let [email, setEmail] = useState(\"\");\n  let [comment, setComment] = useState([]);\n  let [commentAuthor, setCommentAuthor] = useState({});\n\n  fetch(\"http://localhost:8000/apip/posts/451\")\n    .then((response) => response.json())\n    .then((data) => {\n      setNote((note = data.note));\n      setFirstName((firstName = data.firstName));\n      setLastName((lastName = data.lastName));\n      setJobTitle((jobTitle = data.jobTitle));\n      setCity((city = data.city));\n      setCompetences((competences = data.competences));\n      setParcours((parcours = data.course));\n      setEmail((email = data.email));\n      setComment((comment = data.comments));\n      setCommentAuthor((commentAuthor = comment.firstName));\n      /*     comment.map(({ firstName }) => {\n        setCommentAuthor((commentAuthor = firstName));\n      }); */\n    });\n  console.log(commentAuthor);\n  return (\n    <ProfileContext.Provider\n      value={{\n        note,\n        firstName,\n        lastName,\n        jobTitle,\n        city,\n        competences,\n        parcours,\n        email,\n        commentAuthor,\n      }}\n    >\n      {props.children}\n    </ProfileContext.Provider>\n  );\n};\nexport default ProfileContextProvider;\n"]},"metadata":{},"sourceType":"module"}