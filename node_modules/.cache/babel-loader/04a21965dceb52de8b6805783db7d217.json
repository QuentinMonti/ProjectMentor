{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/Hetic/ProjectMentor/src/Contexts/ProfileContext.js\";\nimport React, { useState, createContext } from \"react\";\nexport const ProfileContext = createContext();\n\nconst ProfileContextProvider = props => {\n  let [note, setNote] = useState(\"\");\n  let [firstName, setFirstName] = useState(\"\");\n  let [lastName, setLastName] = useState(\"\");\n  let [jobTitle, setJobTitle] = useState(\"\");\n  let [city, setCity] = useState(\"\");\n  let [competences, setCompetences] = useState([]);\n  let [parcours, setParcours] = useState(\"\");\n  let [email, setEmail] = useState(\"\");\n  let [comment, setComment] = useState([]);\n  let [commentAuthor, setCommentAuthor] = useState([]);\n  fetch(\"http://localhost:8000/apip/posts/451\").then(response => response.json()).then(data => {\n    setNote(note = data.note);\n    setFirstName(firstName = data.firstName);\n    setLastName(lastName = data.lastName);\n    setJobTitle(jobTitle = data.jobTitle);\n    setCity(city = data.city);\n    setCompetences(competences = data.competences);\n    setParcours(parcours = data.course);\n    setEmail(email = data.email);\n    setComment(comment = data.comments);\n  });\n  comment.map(({\n    firstName\n  }) => {\n    setCommentAuthor(commentAuthor = firstName);\n  });\n  console.log(commentAuthor);\n  return /*#__PURE__*/React.createElement(ProfileContext.Provider, {\n    value: {\n      note,\n      firstName,\n      lastName,\n      jobTitle,\n      city,\n      competences,\n      parcours,\n      email\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, props.children);\n};\n\nexport default ProfileContextProvider;","map":{"version":3,"sources":["/Users/admin/Documents/Hetic/ProjectMentor/src/Contexts/ProfileContext.js"],"names":["React","useState","createContext","ProfileContext","ProfileContextProvider","props","note","setNote","firstName","setFirstName","lastName","setLastName","jobTitle","setJobTitle","city","setCity","competences","setCompetences","parcours","setParcours","email","setEmail","comment","setComment","commentAuthor","setCommentAuthor","fetch","then","response","json","data","course","comments","map","console","log","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,aAA1B,QAA+C,OAA/C;AAEA,OAAO,MAAMC,cAAc,GAAGD,aAAa,EAApC;;AAEP,MAAME,sBAAsB,GAAIC,KAAD,IAAW;AAExC,MAAI,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAA9B;AACA,MAAI,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,EAAD,CAAxC;AACA,MAAI,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,EAAD,CAAtC;AACA,MAAI,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAtC;AACA,MAAI,CAACa,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,EAAD,CAA9B;AACA,MAAI,CAACe,WAAD,EAAcC,cAAd,IAAgChB,QAAQ,CAAC,EAAD,CAA5C;AACA,MAAI,CAACiB,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC,EAAD,CAAtC;AACA,MAAI,CAACmB,KAAD,EAAQC,QAAR,IAAoBpB,QAAQ,CAAC,EAAD,CAAhC;AACA,MAAI,CAACqB,OAAD,EAAUC,UAAV,IAAwBtB,QAAQ,CAAC,EAAD,CAApC;AACA,MAAI,CAACuB,aAAD,EAAgBC,gBAAhB,IAAoCxB,QAAQ,CAAC,EAAD,CAAhD;AAGEyB,EAAAA,KAAK,CAAC,sCAAD,CAAL,CACGC,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAGKG,IAAD,IACA;AACEvB,IAAAA,OAAO,CAACD,IAAI,GAAGwB,IAAI,CAACxB,IAAb,CAAP;AACAG,IAAAA,YAAY,CAACD,SAAS,GAAGsB,IAAI,CAACtB,SAAlB,CAAZ;AACAG,IAAAA,WAAW,CAACD,QAAQ,GAAGoB,IAAI,CAACpB,QAAjB,CAAX;AACAG,IAAAA,WAAW,CAACD,QAAQ,GAAGkB,IAAI,CAAClB,QAAjB,CAAX;AACAG,IAAAA,OAAO,CAACD,IAAI,GAAGgB,IAAI,CAAChB,IAAb,CAAP;AACAG,IAAAA,cAAc,CAACD,WAAW,GAAEc,IAAI,CAACd,WAAnB,CAAd;AACAG,IAAAA,WAAW,CAACD,QAAQ,GAAEY,IAAI,CAACC,MAAhB,CAAX;AACAV,IAAAA,QAAQ,CAACD,KAAK,GAAGU,IAAI,CAACV,KAAd,CAAR;AACAG,IAAAA,UAAU,CAACD,OAAO,GAAGQ,IAAI,CAACE,QAAhB,CAAV;AACD,GAdL;AAiBAV,EAAAA,OAAO,CAACW,GAAR,CAAY,CAAC;AAACzB,IAAAA;AAAD,GAAD,KAAkB;AAAEiB,IAAAA,gBAAgB,CAAED,aAAa,GAAGhB,SAAlB,CAAhB;AAA+C,GAA/E;AAEA0B,EAAAA,OAAO,CAACC,GAAR,CAAYX,aAAZ;AACA,sBACE,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAG;AAAClB,MAAAA,IAAD;AAAQE,MAAAA,SAAR;AAAmBE,MAAAA,QAAnB;AAA6BE,MAAAA,QAA7B;AAAuCE,MAAAA,IAAvC;AAA6CE,MAAAA,WAA7C;AAA0DE,MAAAA,QAA1D;AAAoEE,MAAAA;AAApE,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGf,KAAK,CAAC+B,QADT,CADF;AAMH,CAxCD;;AAyCA,eAAehC,sBAAf","sourcesContent":["import React, { useState, createContext } from \"react\";\n\nexport const ProfileContext = createContext();\n\nconst ProfileContextProvider = (props) => {\n\n  let [note, setNote] = useState(\"\");\n  let [firstName, setFirstName] = useState(\"\");\n  let [lastName, setLastName] = useState(\"\");\n  let [jobTitle, setJobTitle] = useState(\"\");\n  let [city, setCity] = useState(\"\");\n  let [competences, setCompetences] = useState([]);\n  let [parcours, setParcours] = useState(\"\");\n  let [email, setEmail] = useState(\"\");\n  let [comment, setComment] = useState([]);\n  let [commentAuthor, setCommentAuthor] = useState([]);\n   \n  \n    fetch(\"http://localhost:8000/apip/posts/451\")\n      .then((response) => response.json())\n      .then(\n        (data) =>\n        {  \n          setNote(note = data.note)\n          setFirstName(firstName = data.firstName)\n          setLastName(lastName = data.lastName)\n          setJobTitle(jobTitle = data.jobTitle)\n          setCity(city = data.city)\n          setCompetences(competences= data.competences)\n          setParcours(parcours= data.course)\n          setEmail(email = data.email)\n          setComment(comment = data.comments)\n        }\n      )\n\n    comment.map(({firstName} ) => { setCommentAuthor( commentAuthor = firstName ) });\n\n    console.log(commentAuthor);\n    return (\n      <ProfileContext.Provider value={ {note , firstName, lastName, jobTitle, city, competences, parcours, email} }>\n        {props.children}\n      </ProfileContext.Provider>\n    );\n\n};\nexport default ProfileContextProvider;\n"]},"metadata":{},"sourceType":"module"}